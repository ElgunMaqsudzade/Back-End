@model CourseVM
@{
    ViewData["Title"] = "Detail";
    string url = "/Course/";
}

<!-- Banner Area Start -->
@await Component.InvokeAsync("Banner", new { word = "courses details" })
<!-- Banner Area End -->
<!-- Blog Start -->
<div class="courses-details-area blog-area pt-150 pb-140">
    <div class="container">
        <div class="row">
            <div class="col-md-8">
                <div class="courses-details">
                    <div class="courses-details-img">
                        <img src="~/img/course/@Model.CourseSimple.Image" alt="courses-details">
                    </div>
                    <div class="course-details-content">
                        <h2>@Model.CourseSimple.Title</h2>
                        <p>@Model.CourseSimple.MainContent</p>
                        <div class="course-details-left">
                            <div class="single-course-left">
                                <h3>about course</h3>
                                <p>@Model.CourseSimple.CourseDetail.AboutCourse</p>
                            </div>
                            <div class="single-course-left">
                                <h3>how to apply</h3>
                                <p>@Model.CourseSimple.CourseDetail.ApplyContent</p>
                            </div>
                            <div class="single-course-left">
                                <h3>certification</h3>
                                @Html.Raw(Model.CourseSimple.CourseDetail.CertificationContent)
                            </div>
                        </div>
                        <div class="course-details-right">
                            <h3>COURSE FEATURES</h3>
                            <ul>
                                <li>
                                    starts <span>@Model.CourseSimple.CourseDetail.CourseFeature.StartingTime.ToString("d, MMMM yyyy")</span>
                                </li>
                                <li>duration <span>@(Math.Round((Double)(Model.CourseSimple.CourseDetail.CourseFeature.CourseDuration) / 720,0)) Month</span></li>
                                <li>class duration <span>@Model.CourseSimple.CourseDetail.CourseFeature.ClassDuration hours</span></li>
                                <li>skill level <span>@Model.CourseSimple.CourseDetail.CourseFeature.SkillLevel</span></li>
                                <li>language <span>@Model.CourseSimple.CourseDetail.CourseFeature.Language</span></li>
                                <li>students <span>@Model.CourseSimple.CourseDetail.CourseFeature.StudentCount</span></li>
                                <li>assesments <span>@Model.CourseSimple.CourseDetail.CourseFeature.Assesment</span></li>
                            </ul>
                            <h3 class="red">course fee $@Model.CourseSimple.CourseDetail.CourseFeature.Price</h3>
                        </div>
                    </div>
                    <partial name="_CommentSectionPartial" for="@url" />
                    <div class="col-md-12">
                        <hr />
                        <div class="message-field">
                            @if (Model.Comments.Count() != 0)
                            {
                                @foreach (var c in Model.Comments)
                                {
                                    <partial name="_CommentPartial" for="@c" />
                                }
                            }
                        </div>
                        <input type="hidden" id="db-id" value="@Model.CourseSimple.Id" />
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                @await Component.InvokeAsync("Sidebar", new { location = "Course" })
            </div>
        </div>
    </div>
</div>
<!-- Blog End -->
